# OL9 aarch64 kickstart file
# System authorization information
authselect select minimal with-faillock with-silent-lastlog with-pamaccess

# Command line install
cmdline
text

# Run the Setup Agent on first boot
eula --agreed
firstboot --disable

# Only use the "system disk"
ignoredisk --only-use=sda

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# reboot at the end
reboot

# System timezone
timezone UTC --utc

# Network information
network  --bootproto=dhcp --device=eth0 --onboot=yes --ipv6=auto --hostname=localhost.localdomain

# URL to an installation tree on a remote server

# Additional yum repositories that may be used as sources for package installation.

# Root password -- will be overridden by the builder
rootpw --lock

# System services
services --disabled="kdump,rhsmcertd" --enabled="firewalld,sshd,rsyslog,chronyd"
selinux --enforcing
firewall --service=ssh

# System bootloader configuration
bootloader --append="no_timer_check net.ifnames=0 biosdevname=0 crashkernel=auto" --location=mbr --timeout=1  --boot-drive=sda

%pre --erroronfail --interpreter /bin/bash
# Partitioning
# Use parted to create partitions and generate the ks "part" commands
DISK=sda
ROOT_FS=xfs
SETUP_SWAP=yes

# Clear MBR and create a new GPT 
dd if=/dev/zero of=/dev/${DISK} bs=512 count=1
parted -s /dev/${DISK} mklabel gpt

start=1
part=0
parts=()

# EFI partition 200MiB
end=$(( start + 200 ))
(( part += 1 ))
parted -s -a optimal /dev/${DISK}  mkpart '"EFI System Partition"' fat32 ${start}MiB ${end}MiB set ${part} esp on
start=$end
parts+=( "part /boot/efi --fstype=efi      --onpart=${DISK}${part} --label efi" )

# Boot partition 1GiB
end=$(( start + 1024 ))
(( part += 1 ))
parted -s -a optimal /dev/${DISK}  mkpart boot xfs ${start}MiB ${end}MiB
start=$end
parts+=( "part /boot     --fstype=xfs      --onpart=${DISK}${part} --label boot" )

if [[ ${ROOT_FS,,} != "lvm" && ${SETUP_SWAP,,} == "yes" ]]; then
  # Swap partition 4GiB
  end=$(( start + 4096 ))
  (( part += 1 ))
  parted -s -a optimal /dev/${DISK}  mkpart swap linux-swap ${start}MiB ${end}MiB
  start=$end
  parts+=( "part swap      --fstype=swap     --onpart=${DISK}${part} --label swap" )
fi

if [[ ${ROOT_FS,,} == "xfs" ]]; then
  # XFS Root partition 100%
  (( part += 1 ))
  parted -s -a optimal /dev/${DISK}  mkpart root xfs ${start}MiB 100%
  parts+=( "part /         --fstype=xfs      --onpart=${DISK}${part} --label root" )
elif [[ ${ROOT_FS,,} == "btrfs" ]]; then
  # BTRFS partition 100%
  # root & home sub-volumes
  (( part += 1 ))
  parted -s -a optimal /dev/${DISK}  mkpart btrfs_vol btrfs ${start}MiB 100%
  parts+=( "part btrfs.01  --fstype=btrfs    --onpart=${DISK}${part}" )
  parts+=( "btrfs none  --label=btrfs_vol --data=single btrfs.01" )
  parts+=( "btrfs /     --subvol --name=root LABEL=btrfs_vol" )
  parts+=( "btrfs /home --subvol --name=home LABEL=btrfs_vol" )
elif [[ ${ROOT_FS,,} == "lvm" ]]; then
  # LVM partition 100%
  # root & swap logical volumes
  (( part += 1 ))
  parted -s -a optimal /dev/${DISK}  mkpart pv_vol ${start}MiB 100%
  parts+=( "part pv.01                       --onpart=${DISK}${part}" )
  parts+=( "volgroup vg_main pv.01" )
  if [[ ${SETUP_SWAP,,} == "yes" ]]; then
    parts+=( "logvol swap   --fstype=swap --vgname=vg_main --size=4096 --name=lv_swap" )
  fi
  parts+=( "logvol /      --fstype=xfs  --vgname=vg_main --size=4096 --name=lv_root --grow" )
else
  echo "Unsupported partitioning scheme"
  exit 1
fi

for p in "${parts[@]}"; do
  echo "$p"
done > /tmp/partitions-ks.cfg
%end

# Disk partitioning
%include /tmp/partitions-ks.cfg

# '--nocore' adds @core to the exclusion list, which generates issues when it
# is added in the package list...
%packages
# Removed from the "Mandatory" Core group packages:
-dnf-plugin-spacewalk
-iproute-tc
-irqbalance
-parted
-rhn-client-tools
-rhn-setup
-rhnlib
-rhnsd
-rng-tools
-sssd-common
-sssd-kcm

# Removed from the "Default" Core group packages:
-NetworkManager-team
-NetworkManager-tui
-iwl100-firmware
-iwl1000-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000g2a-firmware
-iwl6050-firmware
-iwl7260-firmware
-lshw
-lsscsi
-microcode_ctl
-prefixdevname
-sg3_utils
-sg3_utils-libs

# hwdata blacklists several modules, a.o. the fb (frame buffer) ones
hwdata

# Create a generic image
dracut-config-generic
cloud-utils-growpart

# Guest agent is missing when build in emulated tcg mode
qemu-guest-agent

# Ironing out differences between full dvd and boot iso
elfutils-debuginfod-client
-flashrom
freetype
-gawk-all-langpacks
-glibc-all-langpacks
glibc-langpack-en
-glibc-gconv-extra
graphite2
grub2-tools-extra
harfbuzz
-libcap-ng-python3
libpng
openssl-pkcs11
python-unversioned-command.noarch
rpm-plugin-systemd-inhibit
rsyslog-logrotate
zstd
%end

# dracut-shutdown services can take a bit longer than the default 90 seconds
# If it doesn't finish, the system won't be able to reboot after install...
%pre --interpreter /bin/bash
mkdir -p /run/systemd/system/dracut-shutdown.service.d
cat > /run/systemd/system/dracut-shutdown.service.d/override.conf <<-EOF
[Service]
TimeoutStopSec=900
EOF
systemctl daemon-reload
%end

%post --interpreter /bin/bash --log=/root/ks-post.log
echo_header() {
  echo ">>> Kickstart: $* <<<"
}
echo_message() {
  echo "... Kickstart: $* ..."
}

echo_header "Network fixes"
# ToDo: this might not be necessary
cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# generic localhost names
cat > /etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

EOF

# make sure firstboot doesn't start
echo "RUN_FIRSTBOOT=NO" > /etc/sysconfig/firstboot

EXCLUDE_DOCS="no"
echo_header "Exclude documentation: ${EXCLUDE_DOCS,,}"
if [[ "${EXCLUDE_DOCS,,}" = "yes" ]]; then 
  echo "tsflags=nodocs" >> /etc/dnf/dnf.conf
fi

echo_header "Kernel configuration"
RESCUE_KERNEL=no
echo_message "Include Rescue Kernel: ${RESCUE_KERNEL,,}"
if [[ "${RESCUE_KERNEL,,}" = "no" ]]; then
  dnf remove -y dracut-config-rescue
  rm -f "/boot/{initramfs,vmlinuz}-0-rescue-$(cat /etc/machine-id)"*
  rm -f "/boot/loader/entries/$(cat /etc/machine-id)-0-rescue.conf"
fi

echo_message "Get latest release package"
dnf upgrade -y oraclelinux-release-el9

# Install latest kernel, that way it will be available at first boot and
# allow proper cleanup
KERNEL=uek
UEK_RELEASE=8
echo_message "Kernel selection: ${KERNEL,,}"

echo_message "Running kernel: $(uname -r)"
echo_message "Kernel package(s) installed:"
rpm -qa | grep '^kernel' | sort

dnf_options+=("--disablerepo" "ol9_UEKR*" "--enablerepo" "ol9_UEKR${UEK_RELEASE}")
kernel="kernel-uek-core"

# Set default kernel
sed -i -e 's/^DEFAULTKERNEL=.*/DEFAULTKERNEL='"${kernel}"'/' /etc/sysconfig/kernel

if rpm --quiet -q "${kernel}"; then
  echo_message "Kernel ${kernel} already installed"
  # dnf check-update doesn't work if the selected UEK release is not the
  # latest one
  installed_package=$(rpm -q "${kernel}")
  installed_version="${installed_package#"${kernel}-"}"
  latest_package=$(dnf repoquery "${dnf_options[@]}" --nvr --latest-limit 1 "${kernel}").$(uname -m)
  echo_message "    Installed: ${installed_package}"
  echo_message "    Wanted   : ${latest_package}"
  if [[ ${installed_package} != "${latest_package}" ]]; then
    echo_message "    Installing ${latest_package}"
    dnf install -y "${dnf_options[@]}" "${latest_package}"
  else
    echo_message "    Ensure default kernel is ${kernel}-${installed_version}"
    grubby --set-default="/boot/vmlinuz-${installed_version}"
  fi
else
  echo_message "Installing ${kernel}"
  dnf install -y "${dnf_options[@]}" ${kernel}
fi

# Ensure we have the correct boot options
grub2-mkconfig -o /boot/grub2/grub.cfg --update-bls-cmdline

TMP_IN_TMPFS=no
echo_header "Use tmpfs for /tmp: ${TMP_IN_TMPFS,,}"
if [[ "${TMP_IN_TMPFS,,}" == "yes" ]]; then
  systemctl enable tmp.mount
fi
%end

%addon com_redhat_kdump --disable
%end
